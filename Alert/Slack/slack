#!/usr/bin/env python

import sys
from optparse import OptionParser
from collections import OrderedDict

if sys.version_info.major < 3:
    from httplib import HTTPSConnection
    from urlparse import urlparse
else:
    from http.client import HTTPSConnection
    from urllib.parse import urlparse

import json


# Parse body from Zabbix and return a dict
# Body must be composed of lines formated as "KEY: VALUE"
def parse_body(body):
    params = OrderedDict([])

    for str in body.split("\n"):
        key, value = str.split(':', 1)
        params[key.strip()] = value.strip()

    # These keys are used in other some places
    for key in [
            'DATETIME',    # fallback
            'TRIGGER_STATUS',    # color
            'TRIGGER_SEVERITY',    # color
            ]:
        if key not in params:
            params[key] = ''

    return params


# Color of the post on Slack
def decide_color(trigger_status, trigger_severity):
    # Slack allows 'good', 'warning' and 'danger' as color
    if trigger_status == 'OK':
        return 'good'
    elif trigger_severity == 'Information':
        return '#7499FF'
    elif trigger_severity == 'Warning':
        return 'warning'
    else:
        return 'danger'


# Fields of the post
# They are composed of key and value from body
def build_fields(params):
    fields = []
    for key in params:
        fields.append({
            "title": key,
            "value": params[key],
            "short": "true"
            })
    return fields


def post(url, payload):
    uri = urlparse(url)
    conn = HTTPSConnection(uri.netloc)
    conn.request('POST', uri.path, json.dumps(payload))
    response = conn.getresponse()
    return response.status, response.reason


if __name__ == '__main__':
    usage = "Usage: %prog [options] URL SUBJECT BODY"
    parser = OptionParser(usage=usage)
    parser.add_option("-u", "--user", dest="user",
                      help="Username for the post", metavar="USERNAME")
    parser.add_option("-c", "--channel", dest="channel",
                      help="Channel which post to", metavar="CHANNEL")
    (options, args) = parser.parse_args()

    if len(args) != 3:
        parser.print_help()
        exit(1)

    url, subject, body = args

    payload = {}
    if options.channel:
        payload['channel'] = options.channel
    if options.user:
        payload['username'] = options.user

    params = parse_body(body)
    color = decide_color(params['TRIGGER_STATUS'], params['TRIGGER_SEVERITY'])
    fields = build_fields(params)
    payload['attachments'] = [{
            "fallback": params['DATETIME'] + ': ' + subject,
            "title": subject,
            "color": color,
            "fields": fields
        }]
    response = post(url, payload)
    if not (response[0] == 200 and response[1] == 'OK'):
        exit(1)
